Source: [y.hasI(), y.getI() == 200, !n.hasI(), n.getI() == 0,
 n.assignI(43).hasI(), n.assignI(42).getI() == 42,
 y.assignI(99).hasI(), y.assignI(31).getI() == 31,
 !n.clearI().hasI(), !y.clearI().hasI(), y.clearI().getI() == 0,
 y.hasN(), y.getN().getI() == 0, !y.getN().hasN(), y.getN().getN().getI() == 0,
 !n.hasN(), n.assignN(y).getN().hasN(),
 !n.clearN().hasN(), !y.clearN().hasN(),
 n.getR() == [], y.getR().map(h, h.single_string) == ["alpha", "beta"],
 n.assignR(["a", "b"].map(s, TestAllTypes{single_string:s})).getR().map(h, h.single_string) == ["a", "b"],
 y.clearR().getR() == []]
declare y {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare n {
  value google.api.expr.test.v1.proto3.TestAllTypes
}
declare getI {
  function getI google.api.expr.test.v1.proto3.TestAllTypes.() -> int
}
declare hasI {
  function hasI google.api.expr.test.v1.proto3.TestAllTypes.() -> bool
}
declare assignI {
  function assignI google.api.expr.test.v1.proto3.TestAllTypes.(int) -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare clearI {
  function clearI google.api.expr.test.v1.proto3.TestAllTypes.() -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare getN {
  function getN google.api.expr.test.v1.proto3.TestAllTypes.() -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare hasN {
  function hasN google.api.expr.test.v1.proto3.TestAllTypes.() -> bool
}
declare assignN {
  function assignN google.api.expr.test.v1.proto3.TestAllTypes.(google.api.expr.test.v1.proto3.TestAllTypes) -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare clearN {
  function clearN google.api.expr.test.v1.proto3.TestAllTypes.() -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare getR {
  function getR google.api.expr.test.v1.proto3.TestAllTypes.() -> list(google.api.expr.test.v1.proto2.TestAllTypes)
}
declare assignR {
  function assignR google.api.expr.test.v1.proto3.TestAllTypes.(list(google.api.expr.test.v1.proto2.TestAllTypes)) -> google.api.expr.test.v1.proto3.TestAllTypes
}
declare clearR {
  function clearR google.api.expr.test.v1.proto3.TestAllTypes.() -> google.api.expr.test.v1.proto3.TestAllTypes
}
=====>
bindings: {y=single_int32: 100
[google.api.expr.test.v1.proto2.int32_ext]: 200
[google.api.expr.test.v1.proto2.nested_ext] {
  single_int32: 50
}
[google.api.expr.test.v1.proto2.repeated_test_all_types] {
  single_string: "alpha"
}
[google.api.expr.test.v1.proto2.repeated_test_all_types] {
  single_string: "alpha"
}
, n=single_int32: 50
}
result:   [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true]
